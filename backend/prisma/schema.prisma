generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(BUYER)

  wishlist Wishlist[]
  reviews  Review[] // Relasi ke review yang dibuat user
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Role {
  OWNER
  INVENTORY_MANAGER
  BUYER
  SHOPKEEPER
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  description     String?
  retailPrice     Float // Harga eceran
  wholesalePrice  Float? // Harga grosir
  minWholesaleQty Int? // Minimum pembelian untuk harga grosir
  sku             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categories ProductCategory[]
  images     ProductImage[]
  discount  ProductDiscount?
  reviews    Review[] // Relasi ke review produk
  wishlist   Wishlist[] // Relasi ke wishlist

  inventoryId Int       @unique
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  brandId   Int?
  brand     Brand? @relation(fields: [brandId], references: [id])
}

// Merk
// Merk (Brand)
model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  logoUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[] // One brand can have many products
}

// Model Review untuk ulasan produk
model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int // UserId user yang membuat review
  rating    Int // Rating (biasanya 1-5)
  comment   String? // Komentar review (opsional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId]) // Setiap user hanya bisa review produk sekali
}

// Tabel diskon produk
model ProductDiscount {
  id            Int          @id @default(autoincrement())
  productId     Int @unique
  name          String // Nama diskon (mis. "Promo Lebaran", "Diskon Akhir Tahun")
  description   String?
  discountType  DiscountType
  discountValue Float // Nilai diskon (persentase atau nominal tetap)
  minPurchase   Int? // Minimum pembelian untuk mendapatkan diskon (opsional)
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

// Inventory Table
model Inventory {
  id              Int      @id @default(autoincrement())
  locationName    String   @default("Main Warehouse")
  quantityInStock Int      @default(0)
  minimumStock    Int      @default(5)
  lastUpdated     DateTime @updatedAt

  product           Product?
  InventorySupplier InventorySupplier[]
}

// Supplier Table
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  email     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  InventorySupplier InventorySupplier[]
}

// Inventory-Supplier Table
model InventorySupplier {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  supplierId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  Supplier    Supplier  @relation(fields: [supplierId], references: [id])

  @@unique([inventoryId, supplierId])
}

enum DiscountType {
  PERCENTAGE // Diskon persentase (mis. 10%)
  FIXED // Diskon nominal tetap (mis. Rp 10.000)
  BUY_X_GET_Y // Beli X gratis Y (implementasi detail bisa di aplikasi)
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  email     String
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [email], references: [email])
  product Product @relation(fields: [productId], references: [id])

  @@unique([email, productId]) // Mencegah produk duplikat dalam wishlist pengguna yang sama
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  Product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  description String?
  products ProductCategory[]
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  Product    Product  @relation(fields: [productId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])
}



// Store
model Store {
  id          Int    @id @default(autoincrement())
  name        String @unique
  address     String
  phone       String?
  email       String?
  description String?
  logo        String?
  banner      String?
  operationalHours OperationalHour[]
}

model OperationalHour {
  id         Int    @id @default(autoincrement())
  storeId    Int
  day        Day
  openTime   String
  closeTime  String
  Store      Store  @relation(fields: [storeId], references: [id])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}