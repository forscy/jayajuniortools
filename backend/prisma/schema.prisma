generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  // provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String?    @unique
  password  String? // null able karena tidak semua pembeli harus buat akun
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(BUYER)

  wishlist Wishlist[]
  reviews  Review[] // Relasi ke review yang dibuat user
  Maker    Order[]
  Cart     Cart[]
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Role {
  OWNER
  INVENTORY_MANAGER
  BUYER
  SHOPKEEPER
}

model Product {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  description     String?
  retailPrice     Float // Harga eceran
  wholesalePrice  Float? // Harga grosir
  minWholesaleQty Int? // Minimum pembelian untuk harga grosir
  sku             String?
  productStatus   ProductStatus? @default(AVAILABLE) // Status produk
  // inventory
  locationName    String?        @default("Main Warehouse")
  quantityInStock Int            @default(0)
  minimumStock    Int?           @default(1)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relasi one-to-one dengan Inventory
  // inventory   Inventory? @relation(name: "InventoryToProduct", fields: [inventoryId], references: [productId])
  // inventoryId Int?

  categories ProductCategory[]
  imageUrls  ProductImage[]

  discount   Discount? @relation(fields: [discountId], references: [id])
  discountId Int?

  brand   Brand? @relation(fields: [brandId], references: [id])
  brandId Int?

  reviews   Review[] // Relasi ke review produk
  OrderItem OrderItem[]
  Cart      Cart[]
}

enum ProductStatus {
  AVAILABLE // Produk tersedia untuk dijual
  COMMING_SOON // Produk akan datang
  DELETED // Produk dihapus dari daftar
  ARCHIVED // Produk diarsipkan
  SUSPENDED // Produk dihentikan sementara
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  products    ProductCategory[]
}

model ProductCategory {
  // id         Int      @id @default(autoincrement())
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String

  @@id([productId, categoryName])
}

// Merk
// Merk (Brand)
model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[] // One brand can have many products
}

// Model Review untuk ulasan produk
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int // Rating (biasanya 1-5)
  comment   String? // Komentar review (opsional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int // Id user yang membuat review

  @@unique([userId, productId]) // Setiap user hanya bisa review produk sekali
}

// Tabel diskon produk
model Discount {
  id            Int          @id @default(autoincrement())
  name          String       @unique // Nama diskon (mis. "Promo Lebaran", "Diskon Akhir Tahun")
  description   String?
  discountType  DiscountType
  discountValue Float // Nilai diskon (persentase atau nominal tetap)
  minPurchase   Int          @default(1) // Minimum pembelian untuk mendapatkan diskon (opsional)
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  product Product[]
}

// Supplier Table
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  email     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  InventorySupplier InventorySupplier[]
}

// Inventory-Supplier Table
model InventorySupplier {
  id          Int      @id @default(autoincrement())
  inventoryId Int
  supplierId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  supplier    Supplier @relation(fields: [supplierId], references: [id])

  @@unique([inventoryId, supplierId])
}

enum DiscountType {
  PERCENTAGE // Diskon persentase (mis. 10%)
  FIXED // Diskon nominal tetap (mis. Rp 10.000)
  BUY_X_GET_Y // Beli X gratis Y (implementasi detail bisa di aplikasi)
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int
  // product Product @relation(fields: [productId], references: [id])
  // productId Int

  // @@unique([email, productId]) // Mencegah produk duplikat dalam wishlist pengguna yang sama
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // relation to
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// ORDER
model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(PENDING) // Status order (PENDING, COMPLETED, CANCELLED)
  totalAmount Float // Total harga order
  createdAt   DateTime    @default(now()) // Waktu saat order dibuat
  updatedAt   DateTime    @updatedAt // Waktu saat order terakhir diperbarui
  payment     Payment?
  paymentId   Int?        @unique

  maker      String?
  emailMaker String?

  user   User @relation(fields: [userId], references: [id]) // Relasi ke tabel User
  userId Int // ID pengguna yang membuat order

  items OrderItem[] // Relasi ke order items yang terkait dengan produk
}

enum OrderStatus {
  PENDING // Order baru dibuat, menunggu pembayaran
  COMPLETED // Order selesai, dibayar dan siap diambil
  CANCELLED // Order dibatalkan
  FAILED // Pembayaran gagal atau order gagal diproses
  PACKAGING // Pesanan sedang dikemas
  READY_FOR_PICKUP // Pesanan siap untuk diambil
}

model OrderItem {
  id         Int   @id @default(autoincrement())
  quantity   Int // Jumlah produk yang dibeli
  unitPrice  Float // Harga per unit produk pada saat transaksi
  totalPrice Float // Harga total untuk produk tersebut (unitPrice * quantity)

  order     Order   @relation(fields: [orderId], references: [id]) // Relasi ke Order
  orderId   Int // ID order yang berhubungan
  product   Product @relation(fields: [productId], references: [id]) // Relasi ke Product
  productId Int // ID produk yang dibeli
}

// PAYMENT
model Payment {
  id           Int   @id @default(autoincrement())
  amount       Float // Jumlah yang dibayar
  amountPaid   Float // Jumlah uang yang dibayarkan (opsional, jika menggunakan metode pembayaran tunai)
  amountChange Float // Jumlah uang kembalian (opsional, jika menggunakan metode pembayaran tunai)

  paymentDate   DateTime? // Tanggal pembayaran (opsional, jika tidak menggunakan metode pembayaran langsung)
  paymentStatus PaymentStatus @default(PENDING) // Status pembayaran (PENDING, COMPLETED, FAILED)

  createdAt DateTime @default(now()) // Waktu saat pembayaran dimulai
  updatedAt DateTime @updatedAt // Waktu saat pembayaran terakhir diperbarui

  order   Order @relation(fields: [orderId], references: [id]) // Relasi ke Order
  orderId Int   @unique // ID order yang berhubungan

  receiver   PaymentReceiver @relation(fields: [receiverId], references: [id])
  receiverId Int // Referensi ke PaymentReceiver (penerima pembayaran)
}

enum PaymentStatus {
  PENDING // Pembayaran belum diproses
  COMPLETED // Pembayaran telah berhasil
  FAILED // Pembayaran gagal
}

model PaymentReceiver {
  id                Int           @id @default(autoincrement()) // ID penerima pembayaran
  method            PaymentMethod // Metode pembayaran (bank, e-wallet, cash)
  provider          String // Nama provider (bank atau penyedia e-wallet)
  accountNumber     String // Nomor akun (rekening bank atau nomor e-wallet)
  accountHolderName String // Nama pemilik akun (rekening bank atau akun e-wallet)
  createdAt         DateTime      @default(now()) // Waktu saat penerima pembayaran dibuat
  updatedAt         DateTime      @updatedAt // Waktu saat penerima pembayaran diperbarui

  payments Payment[] // Relasi ke tabel Payment (pembayaran yang diterima)
}

enum PaymentMethod {
  BANK // Pembayaran melalui bank
  E_WALLET // Pemb_
  CASH // Pembayaran tunai
}

// CART
model Cart {
  id        Int      @id @default(autoincrement())
  quantity  Int // Jumlah produk dalam keranjang
  createdAt DateTime @default(now()) // Waktu saat produk ditambahkan ke keranjang
  updatedAt DateTime @updatedAt // Waktu saat produk terakhir diperbarui dalam keranjang

  user      User    @relation(fields: [userId], references: [id]) // Relasi ke User
  userId    Int // ID pengguna yang menambahkan produk ke keranjang
  product   Product @relation(fields: [productId], references: [id]) // Relasi ke Product
  productId Int // ID produk dalam keranjang
}
